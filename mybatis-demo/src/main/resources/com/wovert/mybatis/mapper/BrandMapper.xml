<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace: 名称空间 Mapper接口全限定名-->
<mapper namespace="com.wovert.mybatis.mapper.BrandMapper">
<!--    数据库中字段名名称和实体类的属性名称不一样，则不能自动封装数据
        1. 起别名: 对不一样的列别名起别名，让别名和实体类的属性名一样
            缺点：每次查询都定义一次别名
                sql 片段
                    缺点：不灵活
        2. resultMap(映射)
          - 定义<resultMap>标签
          - 再<select>标签中，使用resultMap属性替换 resultType属性
    -->
<!--    <sql id="brand_column">-->
<!--        id, brand_name as brandName, company_name as companyName, ordered, description, status-->
<!--    </sql>-->

<!--    id 唯一表示-->
<!--    type 映射的类型，支持别名-->
    <resultMap id="brandResultMap" type="brand">
<!--        id 主键映射-->
<!--        result 一般字段映射-->
<!--            column 表的列明-->
<!--            property 实体类的属性名-->
        <result column="brand_name" property="brandName" />
        <result column="company_name" property="companyName" />

    </resultMap>
    <update id="updateAll">
        update tb_brand
        set brand_name = #{brandName},
            company_name = #{companyName},
            ordered = #{ordered},
            description = #{description},
            status = #{status}
        where id = #{id};
    </update>

    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id};
    </update>
<!--    <delete id="deleteById">-->
<!--        delete from tb_brand where id = #{id}-->
<!--    </delete>-->
    <delete id="deleteByIds">
        delete from tb_brand
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <!--    <select id="selectAll" resultType="brand">-->
    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand;
<!--        select id, brand_name as brandName, company_name as companyName, ordered, description, status-->
<!--        from tb_brand;-->
<!--        select-->
<!--            <include refid="brand_column" />-->
<!--        from tb_brand;-->
    </select>


<!--    <select id="selectById" parameterType="int" resultType="brand">-->
<!--        select * from tb_brand where id = #{id};-->
<!--    </select>-->

<!--    *参数占位符：-->
<!--        1. #{}: 将其替换为?，防止SQL注入-->
<!--        2. ${}: 拼接SQL，存在SQL注入问题，一般用于表名和列名不固定的情况-->
<!--    *参数类型：parameterType="int"，可以省略-->
<!--        *特殊字符处理: id < 20 -->
<!--            1. 转移字符: < &lt; -->
<!--            2. CDATA区: <![CDATA[
                                <
                            ]]>
-->



    <select id="selectById" parameterType="int" resultMap="brandResultMap">
<!--        select * from tb_brand where id = ${id};-->
<!--        select * from tb_brand where id &gt; #{id};-->
        select * from tb_brand where id
          <![CDATA[
            <
          ]]>
        #{id};
    </select>
<!--    <select id="selectByMultiCondition" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where-->
<!--            status = #{status}-->
<!--            and company_name like #{companyName}-->
<!--            and brand_name like #{brandName}-->
<!--    </select>-->

<!--    动态条件查询-->
    <select id="selectByMultiCondition" resultMap="brandResultMap">
        select *
        from tb_brand
<!--        where 1 = 1 -->
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

<!--    单条件动态条件查询-->
    <select id="selectBySingleCondition" resultMap="brandResultMap">
        select *
        from tb_brand
<!--        where-->
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName}
                </when>
    <!--            <otherwise>-->
    <!--                1 = 1-->
    <!--            </otherwise>-->
            </choose>
        </where>
    </select>

<!--    返回添加数据的主键，keyProperty 是指向 id 属性的名称-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>
</mapper>